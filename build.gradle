buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE"
	}
}

println "Boot Version [2.1.3.RELEASE], Cloud version [Greenwich.BUILD-SNAPSHOT]"

group = 'com.example'
version = '0.0.1.BUILD-SNAPSHOT'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'eclipse'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.BUILD-SNAPSHOT"
	}
}

sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")
	compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.8'

	testCompile("org.springframework.cloud:spring-cloud-stream-test-support")
	testCompile("org.springframework.boot:spring-boot-starter-webflux")
	// remove::start[]
	// tag::stubrunner[]
	testImplementation("org.springframework.cloud:spring-cloud-starter-contract-stub-runner")
	// end::stubrunner[]
	testCompile("com.example:beer-common:0.0.1.BUILD-SNAPSHOT")
	// remove::end[]
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}
